name: CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lit-rust-sdk/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'lit-rust-sdk/**'
      - '.github/workflows/**'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        rust:
          - stable
          - beta
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          lit-rust-sdk/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Check formatting
      run: |
        cd lit-rust-sdk
        cargo fmt --all -- --check
        
    - name: Run clippy
      run: |
        cd lit-rust-sdk
        cargo clippy --all-targets --all-features -- -D warnings
        
    - name: Run unit tests
      run: |
        cd lit-rust-sdk
        cargo test --lib
        
    - name: Run all integration tests
      env:
        ETHEREUM_PRIVATE_KEY: ${{ secrets.ETHEREUM_PRIVATE_KEY }}
        PKP_PUBLIC_KEY: ${{ secrets.PKP_PUBLIC_KEY }}
        PKP_TOKEN_ID: ${{ secrets.PKP_TOKEN_ID }}
        PKP_ETH_ADDRESS: ${{ secrets.PKP_ETH_ADDRESS }}
        ETHEREUM_RPC_URL: ${{ secrets.ETHEREUM_RPC_URL }}
      run: |
        cd lit-rust-sdk
        # Run all tests with single thread to avoid conflicts
        cargo test -- --nocapture --test-threads=1
        
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: |
        cd lit-rust-sdk
        cargo audit
        
    - name: Check for cargo-deny
      run: |
        cd lit-rust-sdk
        # Install cargo-deny if not present
        cargo install --locked cargo-deny || true
        # Run cargo-deny if deny.toml exists
        if [ -f "deny.toml" ]; then
          cargo deny check
        else
          echo "No deny.toml found, skipping cargo-deny check"
        fi